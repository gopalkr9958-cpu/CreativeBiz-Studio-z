<!DOCTYPE html><html lang="en">
<head>
Â  <meta charset="UTF-8" />
Â  <meta name="viewport" content="width=device-width, initial-scale=1" />
Â  <title>CreativeBiz Studio â€” AI Images â€¢ Animation â€¢ Image â†’ Video</title>
Â  <meta name="description" content="Colorful, modern, minimal and professional web app to generate images, animate assets, and convert images to video." />
Â  <link rel="preconnect" href="https://fonts.googleapis.com">
Â  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
Â  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
Â  <style>
Â  Â  :root{
Â  Â  Â  --bg: #0b0d12; /* deep space */
Â  Â  Â  --card: #121622;
Â  Â  Â  --muted: #8a90a2;
Â  Â  Â  --text: #e9ecf1;
Â  Â  Â  --brandA: #6a5cff; /* violet */
Â  Â  Â  --brandB: #00d4ff; /* aqua */
Â  Â  Â  --accent: #ff7a59; /* coral */
Â  Â  Â  --ring: #3a3f55;
Â  Â  Â  --ok: #21c36a;
Â  Â  Â  --warn: #ffc107;
Â  Â  Â  --err: #ff4d4f;
Â  Â  }
Â  Â  *{box-sizing:border-box}
Â  Â  html,body{height:100%}
Â  Â  body{
Â  Â  Â  margin:0; font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif; color:var(--text); background:radial-gradient(1200px 800px at 100% -5%, rgba(106,92,255,.20), transparent 60%),
Â  Â  Â  radial-gradient(1200px 800px at -10% 110%, rgba(0,212,255,.20), transparent 60%),
Â  Â  Â  linear-gradient(180deg, #0b0d12 0%, #0b0d12 100%);
Â  Â  }
Â  Â  a{color:inherit}
Â  Â  .container{max-width:1100px; margin:0 auto; padding:24px}
Â  Â  .nav{display:flex; align-items:center; justify-content:space-between; gap:16px}
Â  Â  .brand{display:flex; align-items:center; gap:12px; font-weight:800; letter-spacing:.2px}
Â  Â  .brand-badge{width:36px; height:36px; border-radius:10px; background: conic-gradient(from 210deg, var(--brandA), var(--brandB)); box-shadow: 0 6px 20px rgba(106,92,255,.35), 0 2px 8px rgba(0,212,255,.25)}
Â  Â  .cta{display:flex; gap:10px}
Â  Â  .btn{appearance:none; border:1px solid var(--ring); background:#121622; color:var(--text); padding:10px 14px; border-radius:12px; font-weight:600; cursor:pointer; transition:transform .04s ease, box-shadow .2s ease, border-color .2s ease}
Â  Â  .btn:hover{border-color:#4b5168; box-shadow:0 6px 18px rgba(0,0,0,.4)}
Â  Â  .btn:active{transform:translateY(1px)}
Â  Â  .btn.primary{background:linear-gradient(135deg, var(--brandA), var(--brandB)); border:0}
Â  Â  .hero{display:grid; grid-template-columns:1.25fr 1fr; gap:28px; align-items:center; padding:42px 0}
Â  Â  .hero h1{font-size:clamp(28px, 4vw, 48px); line-height:1.05; margin:0 0 10px}
Â  Â  .subtitle{color:var(--muted); font-size:clamp(14px, 1.5vw, 18px)}
Â  Â  .hero-card{background:linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); border:1px solid #252a3c; border-radius:18px; padding:18px; display:grid; grid-template-columns:1fr 1fr; gap:12px}
Â  Â  .pill{display:inline-flex; gap:8px; align-items:center; padding:6px 10px; border-radius:999px; background: rgba(255,255,255,.06); border:1px solid #2a2f45; font-size:12px; color:#cfd5e3}
Â  Â  .grid{display:grid; gap:16px}
Â  Â  .grid.cols-3{grid-template-columns:repeat(3, 1fr)}
Â  Â  .grid.cols-2{grid-template-columns:repeat(2, 1fr)}
Â  Â  @media (max-width: 960px){
Â  Â  Â  .hero{grid-template-columns:1fr}
Â  Â  Â  .hero-card{grid-template-columns:1fr}
Â  Â  Â  .grid.cols-3{grid-template-columns:1fr}
Â  Â  Â  .grid.cols-2{grid-template-columns:1fr}
Â  Â  }
Â  Â  .card{background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.01)); border:1px solid #23283b; border-radius:18px; padding:18px; position:relative; overflow:hidden}
Â  Â  .card h3{margin:0 0 8px}
Â  Â  .field{display:grid; gap:6px}
Â  Â  .field label{font-size:12px; color:#c0c7d7}
Â  Â  .input, select, textarea{background:#0e111a; border:1px solid #262b3f; color:var(--text); border-radius:12px; padding:10px 12px; outline:none}
Â  Â  textarea{min-height:84px; resize:vertical}
Â  Â  .row{display:flex; gap:12px; flex-wrap:wrap; align-items:center}
Â  Â  .spacer{height:16px}
Â  Â  .code{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; font-size:12px; background:#0e111a; border:1px dashed #303750; padding:12px; border-radius:12px; color:#c9d1e6}
Â  Â  .tag{display:inline-flex; align-items:center; gap:6px; padding:5px 8px; background:#0e111a; border:1px solid #2d3250; border-radius:999px; font-size:12px; color:#c6cce0}
Â  Â  .footer{color:#a8b0c9; font-size:13px; padding:36px 0 64px; text-align:center}
Â  Â  .status{font-size:12px; color:#aeb6cd}
Â  Â  .progress{height:8px; background:#10131c; border:1px solid #2a3047; border-radius:999px; overflow:hidden}
Â  Â  .progress-inner{height:100%; width:0}
Â  Â  .divider{height:1px; background:linear-gradient(90deg, transparent, #2a2f45, transparent); margin:20px 0}
Â  Â  .video-preview, .img-preview{width:100%; aspect-ratio:16/9; background:#0d111a; border:1px solid #262b3f; border-radius:12px; display:grid; place-items:center; color:#7f88a8; overflow:hidden}
Â  Â  .notice{font-size:12px; color:#b7bed3}
Â  Â  .tiny{font-size:11px; color:#98a0b6}
Â  Â  /* Minimalistic focus ring */
Â  Â  .input:focus, select:focus, textarea:focus, .btn:focus{outline:2px solid transparent; box-shadow:0 0 0 3px rgba(106,92,255,.35)}
Â  </style>
</head>
<body>
Â  <header class="container nav">
Â  Â  <div class="brand">
Â  Â  Â  <span class="brand-badge"></span>
Â  Â  Â  <span>CreativeBiz Studio</span>
Â  Â  </div>
Â  Â  <div class="cta">
Â  Â  Â  <button class="btn" onclick="document.getElementById('contact').scrollIntoView({behavior:'smooth'})">Contact</button>
Â  Â  Â  <button class="btn primary" onclick="document.getElementById('apps').scrollIntoView({behavior:'smooth'})">Launch Apps</button>
Â  Â  </div>
Â  </header> <main class="container">
Â  Â  <section class="hero">
Â  Â  Â  <div>
Â  Â  Â  Â  <span class="pill">ðŸŽ¨ AI Images Â· âœ¨ Animation Â· ðŸŽ¬ Image â†’ Video</span>
Â  Â  Â  Â  <h1>Colorful, modern, minimal & professional creative tools for your business</h1>
Â  Â  Â  Â  <p class="subtitle">A sleek, singleâ€‘page web app that lets you generate images from prompts, animate assets, and convert images into short videos right in the browser. Plug in your favorite AI APIs when youâ€™re ready.</p>
Â  Â  Â  Â  <div class="row" style="margin-top:12px">
Â  Â  Â  Â  Â  <button class="btn primary" onclick="document.getElementById('apps').scrollIntoView({behavior:'smooth'})">Get Started</button>
Â  Â  Â  Â  Â  <a class="btn" href="#docs">Docs</a>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  <div class="hero-card">
Â  Â  Â  Â  <div class="video-preview" id="heroPreview">
Â  Â  Â  Â  Â  <span>Live Canvas Preview</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div class="grid">
Â  Â  Â  Â  Â  <div class="tag">Fast setup</div>
Â  Â  Â  Â  Â  <div class="tag">No backend required</div>
Â  Â  Â  Â  Â  <div class="tag">Export WebM</div>
Â  Â  Â  Â  Â  <div class="tag">API-ready</div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </section><section id="apps" class="grid cols-3">
Â  <!-- IMAGE GENERATOR -->
Â  <article class="card" id="imageGen">
Â  Â  <h3>1) Generate Images</h3>
Â  Â  <p class="notice">Connect to your preferred AI image API (OpenAI, Stability, Replicate). The UI is ready â€” just wire the <code class="code">generateImage()</code> function.</p>
Â  Â  <div class="field">
Â  Â  Â  <label for="prompt">Prompt</label>
Â  Â  Â  <textarea id="prompt" class="input" placeholder="e.g., A neon tiger leaping through a cyberpunk city, colorful, ultra-detailed, 4k"></textarea>
Â  Â  </div>
Â  Â  <div class="row" style="margin-top:8px">
Â  Â  Â  <div class="field" style="min-width:180px; flex:1">
Â  Â  Â  Â  <label for="style">Style</label>
Â  Â  Â  Â  <select id="style" class="input">
Â  Â  Â  Â  Â  <option value="photorealistic">Photorealistic</option>
Â  Â  Â  Â  Â  <option value="anime">Anime</option>
Â  Â  Â  Â  Â  <option value="illustration">Illustration</option>
Â  Â  Â  Â  Â  <option value="3d">3D Render</option>
Â  Â  Â  Â  </select>
Â  Â  Â  </div>
Â  Â  Â  <div class="field" style="min-width:140px">
Â  Â  Â  Â  <label for="size">Size</label>
Â  Â  Â  Â  <select id="size" class="input">
Â  Â  Â  Â  Â  <option>512x512</option>
Â  Â  Â  Â  Â  <option selected>768x768</option>
Â  Â  Â  Â  Â  <option>1024x1024</option>
Â  Â  Â  Â  Â  <option>1280x720</option>
Â  Â  Â  Â  </select>
Â  Â  Â  </div>
Â  Â  Â  <div class="field" style="min-width:140px">
Â  Â  Â  Â  <label for="seed">Seed (optional)</label>
Â  Â  Â  Â  <input id="seed" class="input" type="number" min="0" placeholder="random" />
Â  Â  Â  </div>
Â  Â  </div>
Â  Â  <div class="row" style="margin-top:12px">
Â  Â  Â  <button class="btn primary" onclick="onGenerate()">Generate</button>
Â  Â  Â  <button class="btn" onclick="downloadImage()">Download</button>
Â  Â  Â  <span class="status" id="genStatus">Idle</span>
Â  Â  </div>
Â  Â  <div class="spacer"></div>
Â  Â  <div class="img-preview" id="genPreview">No image yet</div>
Â  </article>


Â  <!-- ANIMATION LAB -->
Â  <article class="card" id="animLab">
Â  Â  <h3>2) Animation Lab</h3>
Â  Â  <p class="notice">Animate an uploaded image on a canvas. Export the animation as WebM (browser-native).</p>
Â  Â  <div class="row">
Â  Â  Â  <input type="file" id="animFile" accept="image/*" class="input" />
Â  Â  Â  <select class="input" id="animType">
Â  Â  Â  Â  <option value="kenburns">Ken Burns (pan+zoom)</option>
Â  Â  Â  Â  <option value="pan-left">Pan Left</option>
Â  Â  Â  Â  <option value="pan-right">Pan Right</option>
Â  Â  Â  Â  <option value="zoom-in">Zoom In</option>
Â  Â  Â  Â  <option value="zoom-out">Zoom Out</option>
Â  Â  Â  Â  <option value="rotate">Slow Rotate</option>
Â  Â  Â  </select>
Â  Â  Â  <input class="input" id="animDuration" type="number" min="1" max="30" value="6" title="Duration (s)"/>
Â  Â  Â  <button class="btn" onclick="startAnimPreview()">Preview</button>
Â  Â  </div>
Â  Â  <div class="spacer"></div>
Â  Â  <canvas id="animCanvas" class="video-preview"></canvas>
Â  Â  <div class="spacer"></div>
Â  Â  <div class="row">
Â  Â  Â  <button class="btn primary" onclick="exportAnimation()">Export WebM</button>
Â  Â  Â  <div class="progress" style="flex:1; min-width:200px"><div class="progress-inner" id="animProgress"></div></div>
Â  Â  Â  <span class="status" id="animStatus">Idle</span>
Â  Â  </div>
Â  </article>


Â  <!-- IMAGE â†’ VIDEO -->
Â  <article class="card" id="img2vid">
Â  Â  <h3>3) Image â†’ Video</h3>
Â  Â  <p class="notice">Turn a single image into a short video clip with motion. Exports WebM without any server.</p>
Â  Â  <div class="row">
Â  Â  Â  <input type="file" id="vidFile" accept="image/*" class="input" />
Â  Â  Â  <select class="input" id="vidAspect">
Â  Â  Â  Â  <option value="16:9" selected>16:9</option>
Â  Â  Â  Â  <option value="9:16">9:16</option>
Â  Â  Â  Â  <option value="1:1">1:1</option>
Â  Â  Â  </select>
Â  Â  Â  <input class="input" id="vidDuration" type="number" min="2" max="30" value="8" title="Duration (s)"/>
Â  Â  Â  <select class="input" id="vidMotion">
Â  Â  Â  Â  <option value="kb-slow">Ken Burns â€” Slow</option>
Â  Â  Â  Â  <option value="kb-medium" selected>Ken Burns â€” Medium</option>
Â  Â  Â  Â  <option value="kb-fast">Ken Burns â€” Fast</option>
Â  Â  Â  </select>
Â  Â  </div>
Â  Â  <div class="spacer"></div>
Â  Â  <canvas id="vidCanvas" class="video-preview"></canvas>
Â  Â  <div class="spacer"></div>
Â  Â  <div class="row">
Â  Â  Â  <button class="btn primary" onclick="exportImgToVideo()">Export WebM</button>
Â  Â  Â  <div class="progress" style="flex:1; min-width:200px"><div class="progress-inner" id="vidProgress"></div></div>
Â  Â  Â  <span class="status" id="vidStatus">Idle</span>
Â  Â  </div>
Â  </article>
</section>


<section id="docs" style="margin-top:36px" class="card">
Â  <h3>Developer Notes</h3>
Â  <ol class="tiny">
Â  Â  <li><strong>Image Generation API:</strong> Edit <code>generateImage()</code> to call your provider.
Â  Â  Â  <pre class="code">// Example (Replicate):


// const r = await fetch("https://api.replicate.com/v1/predictions", { // method: "POST", // headers: {"Authorization": Token ${REPLICATE_API_TOKEN}, "Content-Type":"application/json"}, // body: JSON.stringify({version: "<model-version-id>", input: {prompt, ...}}) // }); // Poll r.urls.get until status === 'succeeded'; then set genImage.src = output[0]


// Example (OpenAI Images): // const r = await fetch("https://api.openai.com/v1/images/edits-or-generations", { ... })</pre> </li> <li><strong>Branding:</strong> Update colors in the <code>:root</code> CSS variables.</li> <li><strong>Hosting:</strong> This is a single HTML file. Drop into any static host (GitHub Pages, Netlify, Vercel, S3).</li> <li><strong>Exports:</strong> Animations and videos export as <code>.webm</code> using <code>MediaRecorder</code>. Most modern browsers support it.</li> </ol> </section>


<section id="contact" class="footer">
Â  Built with â™¥ for modern creative businesses. <br/>
Â  <span class="tiny">Drop this file on any server and youâ€™re live.</span>
</section>


Â  </main> <script>
Â  Â  // ===== HERO CANVAS PREVIEW (simple floating blobs) =====
Â  Â  (function hero(){
Â  Â  Â  const el = document.getElementById('heroPreview');
Â  Â  Â  const c = document.createElement('canvas');
Â  Â  Â  c.style.width='100%'; c.style.height='100%'; c.width=800; c.height=450; el.innerHTML=''; el.appendChild(c);
Â  Â  Â  const ctx = c.getContext('2d');
Â  Â  Â  const blobs = Array.from({length:5}).map(()=>({
Â  Â  Â  Â  x: Math.random()*c.width,
Â  Â  Â  Â  y: Math.random()*c.height,
Â  Â  Â  Â  r: 60+Math.random()*120,
Â  Â  Â  Â  a: Math.random()*Math.PI*2,
Â  Â  Â  Â  s: .2+Math.random()*.6,
Â  Â  Â  Â  hue: 200+Math.random()*160
Â  Â  Â  }));
Â  Â  Â  function frame(t){
Â  Â  Â  Â  ctx.clearRect(0,0,c.width,c.height);
Â  Â  Â  Â  const g=ctx.createLinearGradient(0,0,c.width,c.height);
Â  Â  Â  Â  g.addColorStop(0,'#101425'); g.addColorStop(1,'#0b0f1d');
Â  Â  Â  Â  ctx.fillStyle = g; ctx.fillRect(0,0,c.width,c.height);
Â  Â  Â  Â  blobs.forEach(b=>{
Â  Â  Â  Â  Â  b.a+=0.005*b.s; b.x+=Math.cos(b.a)*.4; b.y+=Math.sin(b.a)*.4;
Â  Â  Â  Â  Â  const rg = ctx.createRadialGradient(b.x,b.y,10,b.x,b.y,b.r);
Â  Â  Â  Â  Â  rg.addColorStop(0,`hsla(${b.hue}, 90%, 60%, .65)`);
Â  Â  Â  Â  Â  rg.addColorStop(1,'rgba(255,255,255,0)');
Â  Â  Â  Â  Â  ctx.fillStyle=rg; ctx.beginPath(); ctx.arc(b.x,b.y,b.r,0,Math.PI*2); ctx.fill();
Â  Â  Â  Â  });
Â  Â  Â  Â  requestAnimationFrame(frame);
Â  Â  Â  }
Â  Â  Â  requestAnimationFrame(frame);
Â  Â  })();


Â  Â  // ===== IMAGE GENERATION (stub + placeholder gradient) =====
Â  Â  let genImage = new Image();
Â  Â  const genPreview = document.getElementById('genPreview');
Â  Â  function setGenPreview(node){
Â  Â  Â  genPreview.innerHTML=''; genPreview.appendChild(node);
Â  Â  }
Â  Â  function placeholderFromPrompt(prompt){
Â  Â  Â  const canvas = document.createElement('canvas');
Â  Â  Â  canvas.width=768; canvas.height=768; const ctx=canvas.getContext('2d');
Â  Â  Â  const g=ctx.createLinearGradient(0,0,canvas.width,canvas.height);
Â  Â  Â  const h1 = (Math.abs(hash(prompt))%360);
Â  Â  Â  const h2 = (h1+120)%360; const h3=(h1+240)%360;
Â  Â  Â  g.addColorStop(0,`hsl(${h1}, 85%, 60%)`); g.addColorStop(.5,`hsl(${h2}, 85%, 55%)`); g.addColorStop(1,`hsl(${h3}, 85%, 50%)`);
Â  Â  Â  ctx.fillStyle=g; ctx.fillRect(0,0,canvas.width,canvas.height);
Â  Â  Â  ctx.fillStyle='rgba(0,0,0,.25)'; ctx.fillRect(24,24,canvas.width-48,canvas.height-48);
Â  Â  Â  ctx.fillStyle='rgba(255,255,255,.95)'; ctx.font='bold 28px Inter, system-ui'; wrapText(ctx, prompt || 'Your image will appear here', 48, 80, canvas.width-96, 34);
Â  Â  Â  return canvas;
Â  Â  }
Â  Â  function wrapText(ctx, text, x, y, maxWidth, lineHeight){
Â  Â  Â  const words = text.split(' '); let line='';
Â  Â  Â  for(let n=0;n<words.length;n++){
Â  Â  Â  Â  const testLine=line+words[n]+' '; const metrics=ctx.measureText(testLine);
Â  Â  Â  Â  if(metrics.width>maxWidth && n>0){ ctx.fillText(line, x, y); line=words[n]+' '; y+=lineHeight; }
Â  Â  Â  Â  else line=testLine;
Â  Â  Â  }
Â  Â  Â  ctx.fillText(line, x, y);
Â  Â  }
Â  Â  function hash(str){ let h=0, i, chr; if(str.length===0) return h; for(i=0; i<str.length; i++){ chr=str.charCodeAt(i); h=((h<<5)-h)+chr; h|=0; } return h; }


Â  Â  async function generateImage(){
Â  Â  Â  const prompt = document.getElementById('prompt').value.trim();
Â  Â  Â  const style = document.getElementById('style').value;
Â  Â  Â  const size = document.getElementById('size').value;
Â  Â  Â  const seed = document.getElementById('seed').value || undefined;
Â  Â  Â  const status = document.getElementById('genStatus');
Â  Â  Â  status.textContent = 'Generatingâ€¦';


Â  Â  Â  // TODO: Replace this with your API integration (OpenAI / Stability / Replicate)
Â  Â  Â  // Example wiring (pseudo):
Â  Â  Â  // const res = await fetch('/api/generate', {method:'POST', body: JSON.stringify({prompt, style, size, seed})});
Â  Â  Â  // const { imageUrl } = await res.json();
Â  Â  Â  // genImage = new Image(); genImage.src = imageUrl; genImage.onload = () => setGenPreview(genImage);


Â  Â  Â  await new Promise(r=>setTimeout(r, 600));
Â  Â  Â  const canvas = placeholderFromPrompt(prompt || `${style} ${size}`);
Â  Â  Â  genImage = new Image();
Â  Â  Â  genImage.src = canvas.toDataURL('image/png');
Â  Â  Â  setGenPreview(genImage);
Â  Â  Â  status.textContent = 'Done (placeholder). Wire your API to generate real art.';
Â  Â  }
Â  Â  function onGenerate(){
Â  Â  Â  generateImage();
Â  Â  }
Â  Â  function downloadImage(){
Â  Â  Â  if(!genImage || !genImage.src){ alert('Generate an image first.'); return; }
Â  Â  Â  const a = document.createElement('a'); a.href=genImage.src; a.download='creativebiz-image.png'; a.click();
Â  Â  }


Â  Â  // ===== ANIMATION LAB =====
Â  Â  const animCanvas = document.getElementById('animCanvas');
Â  Â  const animCtx = animCanvas.getContext('2d');
Â  Â  let animImg = null, animReq = null, animStart = 0, animDur=6, animMode='kenburns';


Â  Â  function loadImageFromFile(file){
Â  Â  Â  return new Promise((resolve,reject)=>{ const img=new Image(); img.onload=()=>resolve(img); img.onerror=reject; img.src=URL.createObjectURL(file); });
Â  Â  }
Â  Â  function resizeCanvasTo(el, w, h){ el.width=w; el.height=h; el.style.width='100%'; }


Â  Â  async function startAnimPreview(){
Â  Â  Â  const file = document.getElementById('animFile').files[0];
Â  Â  Â  if(!file){ alert('Upload an image first'); return; }
Â  Â  Â  animImg = await loadImageFromFile(file);
Â  Â  Â  animMode = document.getElementById('animType').value;
Â  Â  Â  animDur = Math.max(1, Math.min(30, parseInt(document.getElementById('animDuration').value||6)));
Â  Â  Â  resizeCanvasTo(animCanvas, 960, 540);
Â  Â  Â  cancelAnimationFrame(animReq); animStart = performance.now();
Â  Â  Â  const draw = (now)=>{
Â  Â  Â  Â  const t = ((now - animStart)/1000) % animDur; const p = t/animDur; // 0..1
Â  Â  Â  Â  renderAnimated(animCtx, animCanvas, animImg, p, animMode);
Â  Â  Â  Â  animReq = requestAnimationFrame(draw);
Â  Â  Â  };
Â  Â  Â  animReq = requestAnimationFrame(draw);
Â  Â  Â  document.getElementById('animStatus').textContent = 'Previewingâ€¦';
Â  Â  }


Â  Â  function renderAnimated(ctx, canvas, img, p, mode){
Â  Â  Â  ctx.clearRect(0,0,canvas.width,canvas.height);
Â  Â  Â  // compute transform
Â  Â  Â  const aspectCanvas = canvas.width/canvas.height;
Â  Â  Â  const aspectImg = img.width/img.height;
Â  Â  Â  let w, h; if(aspectImg>aspectCanvas){ h = canvas.height; w = h*aspectImg; } else { w = canvas.width; h = w/aspectImg; }
Â  Â  Â  let x = (canvas.width - w)/2; let y = (canvas.height - h)/2;


Â  Â  Â  let scale=1, dx=0, dy=0, rot=0;
Â  Â  Â  switch(mode){
Â  Â  Â  Â  case 'kenburns': scale = 1 + 0.15*p; dx = (x)*0.0 + 20*(p-0.5); dy = (y)*0.0 + 12*(p-0.5); break;
Â  Â  Â  Â  case 'pan-left': dx = -40*(p-0.5); break;
Â  Â  Â  Â  case 'pan-right': dx = 40*(p-0.5); break;
Â  Â  Â  Â  case 'zoom-in': scale = 1 + 0.25*p; break;
Â  Â  Â  Â  case 'zoom-out': scale = 1.25 - 0.25*p; break;
Â  Â  Â  Â  case 'rotate': rot = (p-0.5)*0.08; scale = 1.05; break;
Â  Â  Â  }
Â  Â  Â  ctx.save();
Â  Â  Â  ctx.translate(canvas.width/2, canvas.height/2);
Â  Â  Â  ctx.rotate(rot);
Â  Â  Â  ctx.scale(scale, scale);
Â  Â  Â  ctx.drawImage(img, -w/2 + dx, -h/2 + dy, w, h);
Â  Â  Â  ctx.restore();
Â  Â  }


Â  Â  async function exportAnimation(){
Â  Â  Â  if(!animImg){ alert('Load an image and click Preview first'); return; }
Â  Â  Â  const status = document.getElementById('animStatus');
Â  Â  Â  const bar = document.getElementById('animProgress'); bar.style.width='0%';
Â  Â  Â  const duration = animDur; const fps = 30; const total = duration*fps;
Â  Â  Â  const stream = animCanvas.captureStream(fps);
Â  Â  Â  const recorder = new MediaRecorder(stream, {mimeType: 'video/webm;codecs=vp9'});
Â  Â  Â  const chunks = [];
Â  Â  Â  recorder.ondataavailable = e => { if